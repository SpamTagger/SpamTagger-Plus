#!/bin/sh

PATH=$PATH:/usr/sbin:/sbin

SRCDIR=$(grep 'SRCDIR' /etc/spamtagger.conf | cut -d ' ' -f3)
if [ "SRCDIR" = "" ]; then
  SRCDIR=/usr/spamtagger
fi
VARDIR=$(grep 'VARDIR' /etc/spamtagger.conf | cut -d ' ' -f3)
if [ "VARDIR" = "" ]; then
  VARDIR=/var/spamtagger
fi

#
# Copyright 1999-2004 The Apache Software Foundation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# Apache control script designed to allow an easy command line interface
# to controlling Apache.  Written by Marc Slemko, 1997/08/23
#
# The exit codes returned are:
#	0 - operation completed successfully
#	1 -
#	2 - usage error
#	3 - httpd could not be started
#	4 - httpd could not be stopped
#	5 - httpd could not be started during a restart
#	6 - httpd could not be restarted during a restart
#	7 - httpd could not be restarted during a graceful restart
#	8 - configuration syntax error
#
# When multiple arguments are given, only the error from the _last_
# one is reported.  Run "apachectl help" for usage info
#
#
# |||||||||||||||||||| START CONFIGURATION SECTION  ||||||||||||||||||||
# --------------------                              --------------------
#
# the path to your PID file
PIDFILE=$VARDIR/run/httpd.pid
#
# the path to your httpd binary, including options if necessary
HTTPD="/opt/apache2/bin/httpd -f $SRCDIR/etc/apache/httpd.conf"
#
# a command that outputs a formatted text version of the HTML at the
# url given on the command line.  Designed for lynx, however other
# programs may work.
LYNX="lynx -dump"
#
# the URL to your server's mod_status status page.  If you do not
# have one, then status and fullstatus will not work.
STATUSURL="http://localhost/server-status"
#
# --------------------                              --------------------
# ||||||||||||||||||||   END CONFIGURATION SECTION  ||||||||||||||||||||

prepare() {
  rm -rf /tmp/php_sessions >/dev/null 2>&1
  mkdir /tmp/php_sessions >/dev/null 2>&1
  chown spamtagger /tmp/php_sessions >/dev/null 2>&1
  sessiondb=/tmp/sessions.sqlite
  if [ -f $sessiondb ]; then
    rm $sessiondb >/dev/null 2>&1
    touch $sessiondb
    chown spamtagger:spamtagger $sessiondb
  fi
  rm /etc/apache/php.ini >/dev/null 2>&1
  rm /etc/opt/php5/php.ini >/dev/null 2>&1
  ln -s $SRCDIR/etc/apache/php.ini /etc/apache/php.ini >/dev/null 2>&1
  ln -s $SRCDIR/etc/apache/php.ini /etc/opt/php5/php.ini >/dev/null 2>&1
  chown -R $VARDIR/log/mailscanner >/dev/null 2>&1
  chown -R spamtagger $VARDIR/run/configurator

  sudofile=/usr/sudo/etc/sudoers
  if [ ! -f $sudofile ]; then
    sudofile=/etc/sudoers
  fi
  cat >$sudofile <<EOF
root    ALL=(ALL) ALL
User_Alias      SPAMTAGGER = spamtagger
Runas_Alias     ROOT = root
Cmnd_Alias      NTPSTARTER = /etc/init.d/ntp-server
Cmnd_Alias      NTPCSTARTER = /etc/init.d/ntp
Cmnd_Alias      NTPDATESTARTER = /etc/init.d/ntpdate
Cmnd_Alias      NTPDATE = /usr/sbin/ntpdate
Cmnd_Alias      DATE = /bin/date
Cmnd_Alias      IFDOWN = /sbin/ifdown
Cmnd_Alias      IFUP = /sbin/ifup
Cmnd_Alias      PASSWD = $SRCDIR/bin/setpassword
Cmnd_Alias      UPDATE = $SRCDIR/scripts/cron/spamtagger_cron.pl
Cmnd_Alias      SSHSTARTER = /etc/init.d/ssh
Cmnd_Alias      CHGHOSTID = $SRCDIR/bin/change_hostid.sh
Cmnd_Alias      DISIF = $SRCDIR/bin/dis_config_interface.sh
Cmnd_Alias      SETPINDB = $SRCDIR/scripts/configuration/set_pass_in_db.sh

Defaults        mailto = root

SPAMTAGGER     * = (ROOT) NOPASSWD: NTPSTARTER
SPAMTAGGER     * = (ROOT) NOPASSWD: NTPCSTARTER
SPAMTAGGER     * = (ROOT) NOPASSWD: NTPDATESTARTER
SPAMTAGGER     * = (ROOT) NOPASSWD: NTPDATE
SPAMTAGGER     * = (ROOT) NOPASSWD: DATE
SPAMTAGGER     * = (ROOT) NOPASSWD: IFDOWN
SPAMTAGGER     * = (ROOT) NOPASSWD: IFUP
SPAMTAGGER     * = (ROOT) NOPASSWD: PASSWD
SPAMTAGGER     * = (ROOT) NOPASSWD: UPDATE
SPAMTAGGER     * = (ROOT) NOPASSWD: STOPSTART
SPAMTAGGER     * = (ROOT) NOPASSWD: SSHSTARTER
SPAMTAGGER     * = (ROOT) NOPASSWD: CHGHOSTID
SPAMTAGGER     * = (ROOT) NOPASSWD: DISIF
SPAMTAGGER     * = (ROOT) NOPASSWD: SETPINDB

bb        ALL=(root) NOPASSWD:/etc/init.d/xymon, /sbin/poweroff
#includedir /etc/sudoers.d
EOF
  touch /etc/ntp.conf >/dev/null 2>&1
  chgrp spamtagger /etc/ntp.conf >/dev/null 2>&1
  chmod g+w /etc/ntp.conf >/dev/null 2>&1
  chgrp spamtagger /etc/network/interfaces >/dev/null 2>&1
  chmod g+w /etc/network/interfaces >/dev/null 2>&1
  chgrp spamtagger /etc/network/run/ifstate >/dev/null 2>&1
  chmod g+w /etc/network/run/ifstate >/dev/null 2>&1
  chgrp spamtagger /etc/resolv.conf >/dev/null 2>&1
  chmod g+w /etc/resolv.conf >/dev/null 2>&1
  $SRCDIR/bin/dump_apache_config.pl >/dev/null 2>&1
  $SRCDIR/bin/dump_snmpd_config.pl >/dev/null 2>&1

  chown -R spamtagger $SRCDIR/etc/apache/sites 2>&1
  rm -rf $VARDIR/www/stats/*.png >/dev/null 2>&1

  ## set up ldap settings for TLS
  LDAPCERT=$(grep -e '^\s*TLS_REQCERT' /etc/ldap/ldap.conf)
  if [ "$LDAPCERT" = "" ]; then
    echo "TLS_REQCERT never" >>/etc/ldap/ldap.conf
  fi

}

createStubStatus() {
  ## create stub status files
  hosts=$(echo "select hostname from slave" | $SRCDIR/bin/st_mysql -s st_config | sed '1d')
  for h in $hosts; do
    file=$VARDIR/run/spamtagger.$h.status
    if [ ! -f $file ]; then
      cp $VARDIR/run/spamtagger.127.0.0.1.status $file
    fi
  done
}

chown -R spamtagger:spamtagger $SRCDIR/www/guis/admin/public/tmp >/dev/null 2>&1

ERROR=0
ARGV="$@"
if [ "x$ARGV" = "x" ]; then
  ARGS="help"
fi

rm $VARDIR/run/apache.*.rs >/dev/null 2>&1

for ARG in $@ $ARGS; do
  # check for pidfile
  if [ -f $PIDFILE ]; then
    PID=$(cat $PIDFILE)
    if [ "x$PID" != "x" ] && kill -0 $PID 2>/dev/null; then
      STATUS="httpd (pid $PID) running"
      RUNNING=1
    else
      STATUS="httpd (pid $PID?) not running"
      RUNNING=0
    fi
  else
    STATUS="httpd (no pid file) not running"
    RUNNING=0
  fi

  case $ARG in
  start)
    touch $VARDIR/run/apache.start.rs
    echo -n "  Starting Apache: "
    prepare
    if [ $RUNNING -eq 1 ]; then
      echo "already running (pid $PID)."
      continue
    fi
    if $HTTPD; then
      echo "started."
    else
      echo "could not be started."
      ERROR=3
    fi
    createStubStatus
    if [ -f $VARDIR/run/apache.rn ]; then
      rm $VARDIR/run/apache.rn
    fi
    rm $VARDIR/run/apache.*.rs >/dev/null 2>&1
    ;;
  startssl | sslstart | start-SSL)
    touch $VARDIR/run/apache.start.rs
    prepare
    echo -n "  Starting Apache(SSL): "
    if [ $RUNNING -eq 1 ]; then
      echo "already running (pid $PID)."
      continue
    fi
    if $HTTPD -DSSL; then
      echo "started."
    else
      echo "could not be started."
      ERROR=3
    fi
    rm $VARDIR/run/apache.start.rs >/dev/null 2>&1
    ;;
  stop)
    touch $VARDIR/run/apache.stop.rs
    echo -n "  Stopping Apache: "
    if [ $RUNNING -eq 0 ]; then
      echo "$STATUS"
      rm $VARDIR/run/apache.stop.rs >/dev/null 2>&1
      touch $VARDIR/run/apache.stopped
      continue
    fi
    if kill $PID; then
      echo "stopped."
    else
      echo "could not be stopped."
      ERROR=4
    fi
    rm $VARDIR/run/apache.stop.rs >/dev/null 2>&1
    touch $VARDIR/run/apache.stopped
    ;;

  restart)
    touch $VARDIR/run/apache.restart.rs
    $0 stop
    sleep 3
    $0 start
    if [ -f $VARDIR/run/apache.rn ]; then
      rm $VARDIR/run/apache.rn
    fi
    ;;

  graceful)
    touch $VARDIR/run/apache.restart.rs
    sleep 3
    prepare
    if [ $RUNNING -eq 0 ]; then
      echo "$0 $ARG: httpd not running, trying to start"
      if $HTTPD; then
        echo "$0 $ARG: httpd started"
      else
        echo "$0 $ARG: httpd could not be started"
        ERROR=5
      fi
    else
      if $HTTPD -t >/dev/null 2>&1; then
        if kill -USR1 $PID; then
          echo "$0 $ARG: httpd gracefully restarted"
        else
          echo "$0 $ARG: httpd could not be restarted"
          ERROR=7
        fi
      else
        echo "$0 $ARG: configuration broken, ignoring restart"
        echo "$0 $ARG: (run 'apachectl configtest' for details)"
        ERROR=7
      fi
    fi
    if [ -f $VARDIR/run/apache.rn ]; then
      rm $VARDIR/run/apache.rn
    fi
    rm $VARDIR/run/apache.restart.rs >/dev/null 2>&1
    ;;
  status)
    $LYNX $STATUSURL | awk ' /process$/ { print; exit } { print } '
    ;;
  fullstatus)
    $LYNX $STATUSURL
    ;;
  configtest)
    if $HTTPD -t; then
      :
    else
      ERROR=8
    fi
    ;;
  *)
    echo "usage: $0 (start|stop|restart|fullstatus|status|graceful|configtest|help)"
    cat <<EOF

start      - start httpd
startssl   - start httpd with SSL enabled
stop       - stop httpd
restart    - restart httpd if running by sending a SIGHUP or start if 
             not running
fullstatus - dump a full status screen; requires lynx and mod_status enabled
status     - dump a short status screen; requires lynx and mod_status enabled
graceful   - do a graceful restart by sending a SIGUSR1 or start if not running
configtest - do a configuration syntax test
help       - this screen

EOF
    ERROR=2
    ;;

  esac

done

exit $ERROR
